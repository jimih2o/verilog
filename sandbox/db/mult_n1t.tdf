--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=48 LPM_WIDTHB=32 LPM_WIDTHP=80 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:16:58:SJ cbx_lpm_add_sub 2013:04:24:18:16:58:SJ cbx_lpm_mult 2013:04:24:18:16:58:SJ cbx_mgl 2013:04:24:18:18:51:SJ cbx_padd 2013:04:24:18:16:58:SJ cbx_stratix 2013:04:24:18:16:58:SJ cbx_stratixii 2013:04:24:18:16:58:SJ cbx_util_mgl 2013:04:24:18:16:58:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneii_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 12 lut 174 
SUBDESIGN mult_n1t
( 
	dataa[47..0]	:	input;
	datab[31..0]	:	input;
	result[79..0]	:	output;
) 
VARIABLE
	add13_result[61..0]	:	WIRE;
	add17_result[62..0]	:	WIRE;
	add21_result[31..0]	:	WIRE;
	add25_result[16..0]	:	WIRE;
	mac_mult1 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult11 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 12,
			datab_clock = "none",
			datab_width = 14,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 14,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult7 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 14,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult9 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 12,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out10 : cycloneii_mac_out
		WITH (
			dataa_width = 30,
			output_clock = "none"
		);
	mac_out12 : cycloneii_mac_out
		WITH (
			dataa_width = 26,
			output_clock = "none"
		);
	mac_out2 : cycloneii_mac_out
		WITH (
			dataa_width = 36,
			output_clock = "none"
		);
	mac_out4 : cycloneii_mac_out
		WITH (
			dataa_width = 32,
			output_clock = "none"
		);
	mac_out6 : cycloneii_mac_out
		WITH (
			dataa_width = 36,
			output_clock = "none"
		);
	mac_out8 : cycloneii_mac_out
		WITH (
			dataa_width = 32,
			output_clock = "none"
		);
	sft14a[61..0] : soft;
	sft15a[61..0] : soft;
	sft16a[61..0] : soft;
	sft18a[62..0] : soft;
	sft19a[62..0] : soft;
	sft20a[62..0] : soft;
	sft22a[31..0] : soft;
	sft23a[31..0] : soft;
	sft24a[31..0] : soft;
	sft26a[16..0] : soft;
	sft27a[16..0] : soft;
	sft28a[16..0] : soft;
	w380w	: WIRE;
	w431w	: WIRE;
	w969w[80..0]	: WIRE;

BEGIN 
	add13_result[] = sft14a[].out + sft15a[].out;
	add17_result[] = sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out;
	add25_result[] = sft26a[].out + sft27a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[17..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"0";
	mac_mult11.dataa[] = ( dataa[47..36]);
	mac_mult11.datab[] = ( datab[31..18]);
	mac_mult11.signa = B"1";
	mac_mult11.signb = B"1";
	mac_mult3.dataa[] = ( dataa[17..0]);
	mac_mult3.datab[] = ( datab[31..18]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"1";
	mac_mult5.dataa[] = ( dataa[35..18]);
	mac_mult5.datab[] = ( datab[17..0]);
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"0";
	mac_mult7.dataa[] = ( dataa[35..18]);
	mac_mult7.datab[] = ( datab[31..18]);
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"1";
	mac_mult9.dataa[] = ( dataa[47..36]);
	mac_mult9.datab[] = ( datab[17..0]);
	mac_mult9.signa = B"1";
	mac_mult9.signb = B"0";
	mac_out10.dataa[] = mac_mult9.dataout[];
	mac_out12.dataa[] = mac_mult11.dataout[];
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	mac_out8.dataa[] = mac_mult7.dataout[];
	sft14a[].in = ( w431w, ( mac_out12.dataout[24..24], ( mac_out12.dataout[23..23], ( mac_out12.dataout[22..22], ( mac_out12.dataout[21..21], ( mac_out12.dataout[20..20], ( mac_out12.dataout[19..19], ( mac_out12.dataout[18..18], ( mac_out12.dataout[17..17], ( mac_out12.dataout[16..16], ( mac_out12.dataout[15..15], ( mac_out12.dataout[14..14], ( (! mac_out8.dataout[31..31]), ( w380w, ( mac_out12.dataout[11..11], ( mac_out10.dataout[28..28], ( mac_out10.dataout[27..27], ( mac_out10.dataout[26..26], ( mac_out10.dataout[25..25], ( mac_out10.dataout[24..24], ( mac_out10.dataout[23..23], ( mac_out10.dataout[22..22], ( mac_out10.dataout[21..21], ( mac_out10.dataout[20..20], ( mac_out10.dataout[19..19], ( mac_out10.dataout[18..18], ( mac_out8.dataout[17..17], ( mac_out8.dataout[16..16], ( mac_out8.dataout[15..15], ( mac_out8.dataout[14..14], ( mac_out8.dataout[13..13], ( mac_out8.dataout[12..12], ( mac_out8.dataout[11..11], ( mac_out8.dataout[10..10], ( mac_out8.dataout[9..9], ( mac_out8.dataout[8..8], ( mac_out8.dataout[7..7], ( mac_out8.dataout[6..6], ( mac_out8.dataout[5..5], ( mac_out8.dataout[4..4], ( mac_out8.dataout[3..3], ( mac_out8.dataout[2..2], ( mac_out8.dataout[1..1], ( mac_out8.dataout[0..0], ( mac_out6.dataout[17..17], ( mac_out6.dataout[16..16], ( mac_out6.dataout[15..15], ( mac_out6.dataout[14..14], ( mac_out6.dataout[13..13], ( mac_out6.dataout[12..12], ( mac_out6.dataout[11..11], ( mac_out6.dataout[10..10], ( mac_out6.dataout[9..9], ( mac_out6.dataout[8..8], ( mac_out6.dataout[7..7], ( mac_out6.dataout[6..6], ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( mac_out6.dataout[3..3], ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..0])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft15a[].in = ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( mac_out12.dataout[13..13], ( mac_out12.dataout[12..12], ( (! mac_out10.dataout[29..29]), ( sft28a[15..15].out, ( sft28a[14..14].out, ( sft28a[13..13].out, ( sft28a[12..12].out, ( sft28a[11..11].out, ( sft28a[10..10].out, ( sft28a[9..9].out, ( sft28a[8..8].out, ( sft28a[7..7].out, ( sft28a[6..6].out, ( sft28a[5..5].out, ( sft28a[4..4].out, ( sft28a[3..3].out, ( sft28a[2..2].out, ( sft28a[1..1].out, ( sft28a[0..0].out, ( mac_out6.dataout[30..30], ( mac_out6.dataout[29..29], ( mac_out6.dataout[28..28], ( mac_out6.dataout[27..27], ( mac_out6.dataout[26..26], ( mac_out6.dataout[25..25], ( mac_out6.dataout[24..24], ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..19], ( mac_out6.dataout[18..18], ( mac_out4.dataout[17..17], ( mac_out4.dataout[16..16], ( mac_out4.dataout[15..15], ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], ( mac_out4.dataout[10..10], ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], ( mac_out4.dataout[3..3], ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft16a[].in = add13_result[];
	sft18a[].in = ( w380w, ( (! mac_out12.dataout[25..25]), ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( sft16a[49..49].out, ( sft16a[48..48].out, ( sft16a[47..47].out, ( sft16a[46..46].out, ( sft16a[45..45].out, ( sft16a[44..44].out, ( sft16a[43..43].out, ( sft16a[42..42].out, ( sft16a[41..41].out, ( sft16a[40..40].out, ( sft16a[39..39].out, ( sft16a[38..38].out, ( sft16a[37..37].out, ( sft16a[36..36].out, ( sft16a[35..35].out, ( sft16a[34..34].out, ( sft16a[33..33].out, ( sft16a[32..32].out, ( sft16a[31..31].out, ( sft16a[30..30].out, ( sft16a[29..29].out, ( sft16a[28..28].out, ( sft16a[27..27].out, ( sft16a[26..26].out, ( sft16a[25..25].out, ( sft16a[24..24].out, ( sft16a[23..23].out, ( sft16a[22..22].out, ( sft16a[21..21].out, ( sft16a[20..20].out, ( sft16a[19..19].out, ( sft16a[18..18].out, ( mac_out2.dataout[35..35], ( mac_out2.dataout[34..34], ( mac_out2.dataout[33..33], ( mac_out2.dataout[32..32], ( mac_out2.dataout[31..31], ( mac_out2.dataout[30..30], ( mac_out2.dataout[29..29], ( mac_out2.dataout[28..28], ( mac_out2.dataout[27..27], ( mac_out2.dataout[26..26], ( mac_out2.dataout[25..25], ( mac_out2.dataout[24..24], ( mac_out2.dataout[23..23], ( mac_out2.dataout[22..22], ( mac_out2.dataout[21..21], ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft19a[].in = ( w431w, ( sft16a[61..61].out, ( sft16a[60..60].out, ( sft16a[59..59].out, ( sft16a[58..58].out, ( sft16a[57..57].out, ( sft16a[56..56].out, ( sft16a[55..55].out, ( sft16a[54..54].out, ( sft16a[53..53].out, ( sft16a[52..52].out, ( sft16a[51..51].out, ( sft16a[50..50].out, ( sft24a[31..31].out, ( sft24a[30..30].out, ( sft24a[29..29].out, ( sft24a[28..28].out, ( sft24a[27..27].out, ( sft24a[26..26].out, ( sft24a[25..25].out, ( sft24a[24..24].out, ( sft24a[23..23].out, ( sft24a[22..22].out, ( sft24a[21..21].out, ( sft24a[20..20].out, ( sft24a[19..19].out, ( sft24a[18..18].out, ( sft24a[17..17].out, ( sft24a[16..16].out, ( sft24a[15..15].out, ( sft24a[14..14].out, ( sft24a[13..13].out, ( sft24a[12..12].out, ( sft24a[11..11].out, ( sft24a[10..10].out, ( sft24a[9..9].out, ( sft24a[8..8].out, ( sft24a[7..7].out, ( sft24a[6..6].out, ( sft24a[5..5].out, ( sft24a[4..4].out, ( sft24a[3..3].out, ( sft24a[2..2].out, ( sft24a[1..1].out, ( sft24a[0..0].out, ( sft16a[17..17].out, ( sft16a[16..16].out, ( sft16a[15..15].out, ( sft16a[14..14].out, ( sft16a[13..13].out, ( sft16a[12..12].out, ( sft16a[11..11].out, ( sft16a[10..10].out, ( sft16a[9..9].out, ( sft16a[8..8].out, ( sft16a[7..7].out, ( sft16a[6..6].out, ( sft16a[5..5].out, ( sft16a[4..4].out, ( sft16a[3..3].out, ( sft16a[2..2].out, ( sft16a[1..1].out, sft16a[0..0].out))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft20a[].in = add17_result[];
	sft22a[].in = ( w431w, ( mac_out8.dataout[30..30], ( mac_out8.dataout[29..29], ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( w380w, ( mac_out10.dataout[13..13], ( mac_out10.dataout[12..12], ( mac_out10.dataout[11..11], ( mac_out10.dataout[10..10], ( mac_out10.dataout[9..9], ( mac_out10.dataout[8..8], ( mac_out10.dataout[7..7], ( mac_out10.dataout[6..6], ( mac_out10.dataout[5..5], ( mac_out10.dataout[4..4], ( mac_out10.dataout[3..3], ( mac_out10.dataout[2..2], ( mac_out10.dataout[1..0])))))))))))))))))))))))))))))));
	sft23a[].in = ( w431w, ( w431w, ( sft28a[16..16].out, ( mac_out8.dataout[28..28], ( mac_out8.dataout[27..27], ( mac_out8.dataout[26..26], ( mac_out8.dataout[25..25], ( mac_out8.dataout[24..24], ( mac_out8.dataout[23..23], ( mac_out8.dataout[22..22], ( mac_out8.dataout[21..21], ( mac_out8.dataout[20..20], ( mac_out8.dataout[19..19], ( mac_out8.dataout[18..18], ( mac_out6.dataout[35..35], ( mac_out6.dataout[34..34], ( mac_out6.dataout[33..33], ( mac_out6.dataout[32..32], ( (! mac_out4.dataout[31..31]), ( mac_out4.dataout[30..30], ( mac_out4.dataout[29..29], ( mac_out4.dataout[28..28], ( mac_out4.dataout[27..27], ( mac_out4.dataout[26..26], ( mac_out4.dataout[25..25], ( mac_out4.dataout[24..24], ( mac_out4.dataout[23..23], ( mac_out4.dataout[22..22], ( mac_out4.dataout[21..21], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..18])))))))))))))))))))))))))))))));
	sft24a[].in = add21_result[];
	sft26a[].in = ( w431w, ( mac_out12.dataout[10..10], ( mac_out12.dataout[9..9], ( mac_out12.dataout[8..8], ( mac_out12.dataout[7..7], ( mac_out12.dataout[6..6], ( mac_out12.dataout[5..5], ( mac_out12.dataout[4..4], ( mac_out12.dataout[3..3], ( mac_out12.dataout[2..2], ( mac_out12.dataout[1..1], ( mac_out12.dataout[0..0], ( mac_out10.dataout[17..17], ( mac_out10.dataout[16..16], ( mac_out10.dataout[15..15], ( mac_out10.dataout[14..14], w380w))))))))))))))));
	sft27a[].in = ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, ( w431w, mac_out6.dataout[31..31]))))))))))))))));
	sft28a[].in = add25_result[];
	result[79..0] = w969w[79..0];
	w380w = B"1";
	w431w = B"0";
	w969w[] = ( sft20a[62..61].out, sft20a[60..59].out, sft20a[58..57].out, sft20a[56..55].out, sft20a[54..53].out, sft20a[52..51].out, sft20a[50..49].out, sft20a[48..47].out, sft20a[46..45].out, sft20a[44..43].out, sft20a[42..41].out, sft20a[40..39].out, sft20a[38..37].out, sft20a[36..35].out, sft20a[34..33].out, sft20a[32..31].out, sft20a[30..29].out, sft20a[28..27].out, sft20a[26..25].out, sft20a[24..23].out, sft20a[22..21].out, sft20a[20..19].out, sft20a[18..17].out, sft20a[16..15].out, sft20a[14..13].out, sft20a[12..11].out, sft20a[10..9].out, sft20a[8..7].out, sft20a[6..5].out, sft20a[4..3].out, sft20a[2..1].out, sft20a[0..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
END;
--VALID FILE
